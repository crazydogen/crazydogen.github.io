{"posts": [{"title": "Getting started easily with the time series analysis(TSA)", "date": "2020-12-16T10:20:00-00.00", "path": "/archives/GetStartedTSA/", "text": "State of the art algorithms in 2020\nCritical difference diagram for classifiersSolid bars indicate cliques, within which there is no significant difference in rank. Tests are performed with the sign rank test using the Holm correction. Top clique of four classifiers represent the state of the art in Spring 2020.Click here (based on UEA &amp; UCR project) to get more details.Datasets\n\nUEA &amp; UCR Time Series Classification Repository is an ongoing project to develop a comprehensive repository for research into time series classification.\nPeter H Charlton's Project Peter's great project, which composes of four clinical time series (Respiratory rate, pulse wave, etc.) now. Besides, he also provides some useful toolbox for time series mentioned above.\n\nPython's libs\n\nThe objective of the  pyts Python package is to make time series classification easily accessible by providing preprocessing and utility tools, and implementations (Comparisons of performance) of several algorithms for time series classification.\ntslearn  (sklearn flavour) is a Python package that provides machine learning tools for the analysis of time series. This package builds on (and hence depends on) scikit-learn, numpy and scipy libraries.\n\n", "categories": [{"name": "GettingStarted", "slug": "GettingStarted", "permalink": "/category/GettingStarted/"}], "tags": [{"name": "TimeSeries", "slug": "TimeSeries", "permalink": "/tag/TimeSeries/"}, {"name": "Python", "slug": "Python", "permalink": "/tag/Python/"}]}, {"title": "Getting started easily with the MIMIC-III DB", "date": "2020-11-27T11:20:00-00.00", "path": "/archives/mimiciiiQS/", "text": "Working with the MIMIC-III database using Structured Query Language\nBefore working with the MIMIC-III DB, you have to be familiar with basic SQL usage.\nHere is an offical tutorial from MIT-LCP\nRunoob's cheatsheet\nW3schools' SQL Tutorial\n\nOverview of the MIMIC-III data\n\nOffical Description\n\nFull SchemaBonus: Some query templates\n\nMetadata for a particular table (admissions in this example)\n \\d+ MIMICIII.ADMISSIONS\n\n\nTotal patients\n SELECT COUNT(*)\n FROM patients;\n\n\nsubject_id hadm_id icustay_id(10 items) from icustays\n SELECT subject_id, hadm_id, icustay_id \n FROM icustays\n LIMIT 10\n\n\nThe numbers of male and female patients\n SELECT gender, COUNT(*)\n FROM patients\n GROUP BY gender;\n\n\nCount the number of patients who died\n SELECT expire_flag, COUNT(*)\n FROM patients\n GROUP BY expire_flag;\n\n\nPatient age and mortality\n WITH first_admission_time AS\n (\n SELECT\n     p.subject_id, p.dob, p.gender\n     , MIN (a.admittime) AS first_admittime\n     , MIN( ROUND( (cast(admittime as date) - cast(dob as date)) / 365.242,2) )\n         AS first_admit_age\n FROM patients p\n INNER JOIN admissions a\n ON p.subject_id = a.subject_id\n GROUP BY p.subject_id, p.dob, p.gender\n ORDER BY p.subject_id\n )\n SELECT\n     subject_id, dob, gender\n     , first_admittime, first_admit_age\n     , CASE\n         -- all ages &gt; 89 in the database were replaced with 300\n         WHEN first_admit_age &gt; 89\n             then '&gt;89'\n         WHEN first_admit_age &gt;= 14\n             THEN 'adult'\n         WHEN first_admit_age &lt;= 1\n             THEN 'neonate'\n         ELSE 'middle'\n         END AS age_group\n FROM first_admission_time\n ORDER BY subject_id\n\n\nHow many of deaths occurred within the ICU\n SELECT ie.subject_id, ie.hadm_id, ie.icustay_id,\n     ie.intime, ie.outtime, adm.deathtime,\n     ROUND((cast(ie.intime as date) - cast(pat.dob as date))/365.242, 2) AS age,\n     ROUND((cast(ie.intime as date) - cast(adm.admittime as date))/365.242, 2) AS preiculos,\n     CASE\n         WHEN ROUND((cast(ie.intime as date) - cast(pat.dob as date))/365.242, 2) &lt;= 1\n             THEN 'neonate'\n         WHEN ROUND((cast(ie.intime as date) - cast(pat.dob as date))/365.242, 2) &lt;= 14\n             THEN 'middle'\n         -- all ages &gt; 89 in the database were replaced with 300\n         WHEN ROUND((cast(ie.intime as date) - cast(pat.dob as date))/365.242, 2) &gt; 100\n             THEN '&gt;89'\n         ELSE 'adult'\n         END AS ICUSTAY_AGE_GROUP,\n     -- note that there is already a &quot;hospital_expire_flag&quot; field in the admissions table which you could use\n     CASE\n         WHEN adm.hospital_expire_flag = 1 then 'Y'           \n     ELSE 'N'\n     END AS hospital_expire_flag,\n     -- note also that hospital_expire_flag is equivalent to &quot;Is adm.deathtime not null?&quot;\n     CASE\n         WHEN adm.deathtime BETWEEN ie.intime and ie.outtime\n             THEN 'Y'\n         -- sometimes there are typographical errors in the death date, so check before intime\n         WHEN adm.deathtime &lt;= ie.intime\n             THEN 'Y'\n         WHEN adm.dischtime &lt;= ie.outtime\n             AND adm.discharge_location = 'DEAD/EXPIRED'\n             THEN 'Y'\n         ELSE 'N'\n         END AS ICUSTAY_EXPIRE_FLAG\n FROM icustays ie\n INNER JOIN patients pat\n ON ie.subject_id = pat.subject_id\n INNER JOIN admissions adm\n ON ie.hadm_id = adm.hadm_id;\n\n\nCategorized Inquiry of Patient Vital Signs\n SELECT pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n\n -- Easier names\n , min(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_min\n , max(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_max\n , avg(case when VitalID = 1 then valuenum ELSE NULL END) AS heartrate_mean\n , min(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_min\n , max(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_max\n , avg(case when VitalID = 2 then valuenum ELSE NULL END) AS sysbp_mean\n , min(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_min\n , max(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_max\n , avg(case when VitalID = 3 then valuenum ELSE NULL END) AS diasbp_mean\n , min(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_min\n , max(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_max\n , avg(case when VitalID = 4 then valuenum ELSE NULL END) AS meanbp_mean\n , min(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_min\n , max(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_max\n , avg(case when VitalID = 5 then valuenum ELSE NULL END) AS resprate_mean\n , min(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_min\n , max(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_max\n , avg(case when VitalID = 6 then valuenum ELSE NULL END) AS tempc_mean\n , min(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_min\n , max(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_max\n , avg(case when VitalID = 7 then valuenum ELSE NULL END) AS spo2_mean\n , min(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_min\n , max(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_max\n , avg(case when VitalID = 8 then valuenum ELSE NULL END) AS glucose_mean\n\n FROM  (\n select ie.subject_id, ie.hadm_id, ie.icustay_id\n , case\n     when itemid in (211,220045) and valuenum &gt; 0 and valuenum &lt; 300 then 1 -- HeartRate\n     when itemid in (51,442,455,6701,220179,220050) and valuenum &gt; 0 and valuenum &lt; 400 then 2 -- SysBP\n     when itemid in (8368,8440,8441,8555,220180,220051) and valuenum &gt; 0 and valuenum &lt; 300 then 3 -- DiasBP\n     when itemid in (456,52,6702,443,220052,220181,225312) and valuenum &gt; 0 and valuenum &lt; 300 then 4 -- MeanBP\n     when itemid in (615,618,220210,224690) and valuenum &gt; 0 and valuenum &lt; 70 then 5 -- RespRate\n     when itemid in (223761,678) and valuenum &gt; 70 and valuenum &lt; 120  then 6 -- TempF, converted to degC in valuenum call\n     when itemid in (223762,676) and valuenum &gt; 10 and valuenum &lt; 50  then 6 -- TempC\n     when itemid in (646,220277) and valuenum &gt; 0 and valuenum &lt;= 100 then 7 -- SpO2\n     when itemid in (807,811,1529,3745,3744,225664,220621,226537) and valuenum &gt; 0 then 8 -- Glucose\n\n     else null end as vitalid\n     -- convert F to C\n , case when itemid in (223761,678) then (valuenum-32)/1.8 else valuenum end as valuenum\n\n from mimiciii.icustays ie\n left join mimiciii.chartevents ce\n on ie.icustay_id = ce.icustay_id\n -- and ce.charttime between ie.intime and DATETIME_ADD(ie.intime, INTERVAL '1' DAY)\n -- and DATETIME_DIFF(ce.charttime, ie.intime, SECOND) &gt; 0\n -- and DATETIME_DIFF(ce.charttime, ie.intime, HOUR) &lt;= 24\n -- exclude rows marked as error\n and (ce.error IS NULL or ce.error = 0)\n where ce.itemid in\n (\n -- HEART RATE\n 211, --&quot;Heart Rate&quot;\n 220045, --&quot;Heart Rate&quot;\n\n -- Systolic/diastolic\n\n 51, --\tArterial BP [Systolic]\n 442, --\tManual BP [Systolic]\n 455, --\tNBP [Systolic]\n 6701, --\tArterial BP #2 [Systolic]\n 220179, --\tNon Invasive Blood Pressure systolic\n 220050, --\tArterial Blood Pressure systolic\n\n 8368, --\tArterial BP [Diastolic]\n 8440, --\tManual BP [Diastolic]\n 8441, --\tNBP [Diastolic]\n 8555, --\tArterial BP #2 [Diastolic]\n 220180, --\tNon Invasive Blood Pressure diastolic\n 220051, --\tArterial Blood Pressure diastolic\n\n\n -- MEAN ARTERIAL PRESSURE\n 456, --&quot;NBP Mean&quot;\n 52, --&quot;Arterial BP Mean&quot;\n 6702, --\tArterial BP Mean #2\n 443, --\tManual BP Mean(calc)\n 220052, --&quot;Arterial Blood Pressure mean&quot;\n 220181, --&quot;Non Invasive Blood Pressure mean&quot;\n 225312, --&quot;ART BP mean&quot;\n\n -- RESPIRATORY RATE\n 618,--\tRespiratory Rate\n 615,--\tResp Rate (Total)\n 220210,--\tRespiratory Rate\n 224690, --\tRespiratory Rate (Total)\n\n\n -- SPO2, peripheral\n 646, 220277,\n\n -- GLUCOSE, both lab and fingerstick\n 807,--\tFingerstick Glucose\n 811,--\tGlucose (70-105)\n 1529,--\tGlucose\n 3745,--\tBloodGlucose\n 3744,--\tBlood Glucose\n 225664,--\tGlucose finger stick\n 220621,--\tGlucose (serum)\n 226537,--\tGlucose (whole blood)\n\n -- TEMPERATURE\n 223762, -- &quot;Temperature Celsius&quot;\n 676,\t-- &quot;Temperature C&quot;\n 223761, -- &quot;Temperature Fahrenheit&quot;\n 678 --\t&quot;Temperature F&quot;\n\n )\n ) pvt \n group by pvt.subject_id, pvt.hadm_id, pvt.icustay_id\n order by pvt.subject_id, pvt.hadm_id, pvt.icustay_id;\n\nClick me to get more templates\n\nQuick Reference\n\nMIMIC-III Tables\nMIMIC-III Data Details\nQuerying MIMIC-III\nMIMIC Offical Code Repository\nDeepL - AI based TranslatorSQL Tools\nPsycopg is the most popular PostgreSQL adapter for the Python programming language.\npgAdmin is the most popular and feature rich Open Source administration and development platform for PostgreSQL, the most advanced Open Source database in the world.\nNavicat is a series of graphical database management and development software produced by CyberTech Ltd. for MySQL, MariaDB, MongoDB, Oracle, SQLite, PostgreSQL and Microsoft SQL Server.\nDbeaver is a universal database management tool for everyone who needs to work with data in a professional way.\n\n", "categories": [{"name": "GettingStarted", "slug": "GettingStarted", "permalink": "/category/GettingStarted/"}], "tags": [{"name": "MIMIC-III", "slug": "MIMIC-III", "permalink": "/tag/MIMIC-III/"}, {"name": "SQL", "slug": "SQL", "permalink": "/tag/SQL/"}]}, {"title": "\u4e8c\u8fdb\u5236 +1 -1\u8ff7\u601d", "date": "2020-11-04T22:20:00-00.00", "path": "/archives/binEncode/", "text": "\u539f\u7801\n\u8ba1\u7b97\u673a\u662f\u4e8c\u8fdb\u5236\u7684\u4e16\u754c\uff0c\u9700\u8981\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u6211\u4eec\u6240\u719f\u77e5\u7684\u5341\u8fdb\u5236\u6570\u5b57\u3002\u6d6e\u70b9\u6570\u66f4\u5b58\u5728\u4e00\u4e9b\u65e0\u6cd5\u7528\u4e8c\u8fdb\u5236\u5b8c\u7f8e\u8868\u793a\u7684\u5341\u8fdb\u5236\u6570\u5b57\uff0c\u8fd9\u662f\u4e8c\u8fdb\u5236\u8ba1\u7b97\u673a\u7684limitions\u4e5f\u662f\u6570\u503c\u8ba1\u7b97\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u70b9\u3002e.g. 1\u76844\u4f4d\u539f\u7801\u8868\u793a 0b0001\uff08\u7701\u53bb\u7b26\u53f7\u4f4d\uff0c\u540c\u4e0b\u6587\uff09\u53cd\u7801\n\u901a\u5e38\u610f\u4e49\u4e0a\u8bb2\uff0c\u53cd\u7801\u6307\u7684\u662f\u6309\u4f4d\u53d6\u53cd\u3002e.g. 0b0001 \u7684\u53cd\u7801 0b1110\u8865\u7801\n\u8ba1\u7b97\u673a\u4e2d\uff0cx+y\u51cf\u6cd5\u8fd0\u7b97\u88abx+(-y)\u7684\u8865\u7801\u8fd0\u7b97\u4ee3\u66ff\uff0c\u4ee5\u51cf\u5c11\u989d\u5916\u7535\u8def\u8bbe\u8ba1\uff0c\u4ec5\u7528\u52a0\u6cd5\u5668\u8fd0\u7b97\u52a0\u51cf\u6cd5\u3002e.g. 4-2 = 4+(-2) -&gt; 0b0100 + 0b1110 = 0b0010\u6ce8\u610f\u6b64\u5904 0b1110 \u5c31\u662f\u8865\u7801\u53732\u6309\u4f4d\u53d6\u53cd+1\u601d\u8003\u4e3a\u4ec0\u4e48\u8865\u7801\u8981+1\uff0c\u5341\u8fdb\u5236\u4e2d0\u662f\u4e00\u4e2a\u7279\u6b8a\u6570\u5b57\uff0c\u5176\u539f\u7801\u662f0b0000 \u53cd\u78010b1111, \u8865\u7801\u662f0b0000(\u9ad8\u4f4d\u820d\u53bb1)\u3002\u95ee\u9898\u51fa\u57280\u7684\u8865\u7801\uff0c\u52a00\u8fd0\u7b97\u4fdd\u6301\u539f\u7ed3\u679c\uff0c\u90a3\u4e48\u76f4\u63a5\u75280b1111\u4e0e\u4efb\u610f\u6570\u5b57\u52a0\u6cd5\u8fd0\u7b97\u4e0e\u5341\u8fdb\u5236\u4e0d\u5bf9\u5e94\uff0c\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u7b80\u5355\uff0c0\u7684\u8865\u7801\u5c31\u662f\u5176\u672c\u8eab\uff0c\u8d1f\u6570\u7684\u4e8c\u8fdb\u5236\u7f16\u7801+1\uff08\u5982-2 -&gt; 0b1110\uff09\u6765\u5145\u5f53\u8865\u7801\u3002\u8fd9\u6837\uff0c\u6240\u6709-\u8fd0\u7b97\u53ef\u4ee5\u7528+\u8865\u7801\u66ff\u4ee3\u3002x &amp; -x -&gt; \u6700\u540e\u4e00\u4f4d1\u7684\u4f4d\u7f6e\n\u5c31\u5728\u4e0a\u8ff0\u5341\u8fdb\u5236\u7684\u4e8c\u8fdb\u5236\u7f16\u7801\u89c4\u5219\u4e0b\uff0c\u4ea7\u751f\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u4f4d\u8fd0\u7b97\u89c4\u5f8b\u3002e.g. 2 &amp; -2 -&gt; 0b0010 &amp; 0b1110 = 0b0010 -&gt;\u6700\u540e\u4e00\u4f4d1\u7684\u4f4d\u7f6ex &amp; (x-1) -&gt; \u5c06\u6700\u540e\u4e00\u4f4d1\u7f6e0\ne.g.2 &amp; (2-1) -&gt; 0b0010 &amp; 0b0001 = 0b0000 = 0 -&gt;\u5c06\u6700\u540e\u4e00\u4f4d1\u7f6e03 &amp; (3-1) -&gt; 0b0011 &amp; 0b0010 = 0b0010 = 2 -&gt;\u5c06\u6700\u540e\u4e00\u4f4d1\u7f6e0\u53cd\u7801+1\u4e3a\u8865\u7801(\u5bf9\u6bd4Python ~x = -x-1)\uff0cx &amp; -x x &amp; (x-1) \u4e8c\u8fdb\u5236\u4e2d+1 -1\u7684\u64cd\u4f5c\u53ef\u4ee5\u8fd9\u6837\u6709\u8da3\u3002Python intToBin32 or bin32ToIntdef intToBin32(i):\n    return (bin(((1 &lt;&lt; 32) - 1) &amp; i)[2:]).zfill(32)\n\ndef bin32ToInt(s):\n    return int(s, 2)\n    # if signed int, int(s[1:], 2)- int(s[0]) * (1 &lt;&lt; 31)\n\n", "categories": [{"name": "Thoughts", "slug": "Thoughts", "permalink": "/category/Thoughts/"}], "tags": [{"name": "+1&-1 operations in bit encode", "slug": "+1&-1 operations in bit encode", "permalink": "/tag/%2B1%26-1%20operations%20in%20bit%20encode/"}, {"name": "Computer Science", "slug": "Computer Science", "permalink": "/tag/Computer%20Science/"}, {"name": "Python", "slug": "Python", "permalink": "/tag/Python/"}]}, {"title": "Awesome pdfs of CS & DL", "date": "2020-10-18T22:20:00-00.00", "path": "/archives/awesome-CS-pdfs/", "text": "Pdfs can be found hereSome additional pics\nOSI7-TCP/IPASCIILinux Performance Obersevability ToolsVIM Keyboard MapOverview of math", "categories": [{"name": "Computer Science", "slug": "Computer Science", "permalink": "/category/Computer%20Science/"}], "tags": [{"name": "Computer Science", "slug": "Computer Science", "permalink": "/tag/Computer%20Science/"}, {"name": "Deep Learning", "slug": "Deep Learning", "permalink": "/tag/Deep%20Learning/"}, {"name": "pdfs", "slug": "pdfs", "permalink": "/tag/pdfs/"}]}, {"title": "Awesome pics of ML & DL", "date": "2020-10-05T17:20:00-00.00", "path": "/archives/awesome-dl-pics/", "text": "2020-ml-roadmap-fullObject DetectionCV-evolutions-minorCV-evolutionsClassification MetricsLoss Functions\nLoss functionsof classification and regressionLast-layer activation and loss function combinationsAlgorithm Taxonomy\nSIGAI algorithm mapSIGAI-DL mapSIGAI-1SIGAI-2SIGAI-3SIGAI-4SIGAI-5\nto be continued\n\n", "categories": [{"name": "Deep Learning", "slug": "Deep Learning", "permalink": "/category/Deep%20Learning/"}], "tags": [{"name": "Deep Learning", "slug": "Deep Learning", "permalink": "/tag/Deep%20Learning/"}, {"name": "Machine Learning", "slug": "Machine Learning", "permalink": "/tag/Machine%20Learning/"}, {"name": "pics", "slug": "pics", "permalink": "/tag/pics/"}]}, {"title": "\u5173\u4e8e\u535a\u5ba2", "date": "2020-10-05T14:54:00-00.00", "path": "/archives/about-blog/", "text": "\u4e00\u5f00\u59cb\u5199\u535a\u5ba2\u53ef\u80fd\u4ec5\u4ec5\u662f\u597d\u73a9\uff0c\u4e5f\u662f\u8fdb\u4e00\u6b65\u63a5\u89e6\u4e92\u8054\u7f51\u751f\u6001\u7684\u4e00\u79cd\u5c1d\u8bd5\u3002\u540e\u6765\u53d1\u73b0\uff0c\u535a\u5ba2\u66f4\u50cf\u662f\u4e2a\u4eba\u601d\u7ef4\u6c89\u6dc0\u805a\u96c6\u5730\uff0c\u7231\u597d\u5174\u8da3\u96c6\u6563\u5730\uff0c\u6280\u672f\u601d\u60f3\u53d1\u6563\u5730\uff0cbug\u8c03\u8bd5\u53c2\u8003\u8d34\uff0c\u4e3a\u9002\u5e94\u4e2d\u6587\u535a\u5ba2\u751f\u6001\uff0c\u7279\u4f5c\u6b64\u6587\u3002\n\u4ee5\u540e\u672c\u535a\u95ee\u5c06\u91c7\u7528\u4e2d\u82f1\u6587\u6df7\u5408\u53d1\u5e03\uff0c\u4ec0\u4e48\u535a\u6587\u7528\u4e2d\u82f1\u6587\u53ef\u80fd\u7eaf\u770b\u5fc3\u60c5\u4e5f\u770b\u7cbe\u529b\n\u672c\u535a\u6587\u4f1a\u5c3d\u91cfcover\u4e2a\u4eba\u601d\u60f3\uff0c\u5174\u8da3\u6742\u8c08\uff0c\u6280\u672f\u601d\u60f3\uff0c\u4ee5\u53cadebug\u76f8\u5173\n\u6682\u4e0d\u8003\u8651\u5f00\u653e\u4ea4\u4e92\n\u535a\u5ba2\u4e3b\u9898\u5f85\u8fdb\u4e00\u6b65\u4f18\u5316\u7f8e\u89c2\n\u5173\u4e8e\u66f4\u65b0\u9891\u7387 (\u61d2\u662f\u4e00\u4e2a\u574e\uff0c\u4ec0\u4e48\u65f6\u5019\u8fc8\uff0c\u600e\u4e48\u8fc8\u662f\u4e24\u4e2a\u95ee\u9898:P)\n\n", "categories": [{"name": "Thoughts", "slug": "Thoughts", "permalink": "/category/Thoughts/"}], "tags": [{"name": "blog", "slug": "blog", "permalink": "/tag/blog/"}]}, {"title": "A easy way to build your own kali live system", "date": "2020-09-19T19:54:00-00.00", "path": "/archives/kali_live_persistence/", "text": "Using a kali live persistence is kind of compromise of choosing daily OS.\nHowever, I notice that it's a troublesome experience to install a kali live persistence. Here is my easy way to install it.#0x01 Download kali live image\nDownload kali live image from Offical download url.Note make sure you have checked SHA256.#0x02 Write kali live into USB\nThe easiest way to write a kali live image is using rufus to write into your thumb drive.Note leave enough space for boot.\nE.g. you have a 32GB USB and download a 3GB kali live image, then you should leave 3-4GB for boot and anthor part for your kali live persistence.If you want encrypted persistence, refer to Adding Persistence to a Kali Linux &quot;Live&quot; USB Drive.#0x03 Install nvidia dirver and cuda\nIf you want nvidia graphics card enabled, make sure #nouveau# is down when you install nvidia driver.#1 You can change  UUI /boot/grub/grub.cfg\ne.g. F:\\boot\\grub\\grub.cfg (F is my USB). Add parameter #nouveau.modeset=0# under persistance section at the end of the line, after editation it should look like this:\nmenuentry &quot;Live system (persistence, check kali.org/prst)&quot; {\nlinux /live/vmlinuz-5.6.7-kali3-amd64 boot=live components splash username=root hostname=kali persistence nouveau.modeset=0\ninitrd /live/initrd.img-5.6.7-kali3-amd64\n\nNote select kali persistence to boot.#2 Once you have that ready boot to your kali persistence.apt-get update &amp;&amp; apt-get upgrade -y &amp;&amp; apt-get dist-upgrade \u2013y\napt-get install linux-headers-$(uname -r) \u2013y\nreboot\n\n#3 Now you should see that Kali booted into low resolution login screen. Login and type in terminal:init 3 (will exit GUI and help nvidia drivers to install correctly)apt-get install -y ocl-icd-libopencl1 nvidia-driver nvidia-cuda-toolkit\n\nOnce this is done reboot and you should have USB bootable pendrive with NVIDIA drivers running.\nYou can verify that with nvidia-smi command, also I need to mention that this worked for me even without updating initramfs (update-initramfs.distrib -u).#0x04 Post installation\nRef.Post install for Live USB persistentThe First 10 Things to Do After Installing Kali Linuxenjoy :)", "categories": [{"name": "Kali", "slug": "Kali", "permalink": "/category/Kali/"}], "tags": [{"name": "Kali live persistence", "slug": "Kali live persistence", "permalink": "/tag/Kali%20live%20persistence/"}]}, {"title": "Pynamer_CN", "date": "2020-09-17T14:54:00-00.00", "path": "/archives/Pynamer_CN/", "text": "A simple Chinese full name generator based on the TOP102 Chinese surname and pinyin first name.What is pynamer_CN?\nPynamer_CN is a simple full name generator, which can generate 18 styles of the Chinese name (e.g. zhangsan, Zhangsan, ZhangSan, ZHANGSAN, sanzhang, SanZhang, Sanzhang, SANZHANG, zs or zhs). According to news about the National Name Report of China in 2019, the top102 surname of Chinese has covered 80%+ surnames in China. \nThere are also some common first names used by most Chinese people. Pynamer_CN is written with simple python3 codes using if-elif-else structure. Surprisingly, pynamer_CN is also supporting python2.Why pynamer_CN?\n\nEasy to use\nSupport Python2/3 without dependencies\nUp to 37125055 chinese names without duplication\n\nWhat you can do with pynamer_CN?\n\nBy pynamer_CN, you can generate a common Chinese name for yourself.\nBuild brute-force passwd dictionary (with pydictor or any dictor).\nBuild your own NOT USE passwd lists.\n\nHow to use it?\nUsage: python pynamer_CN.py [-h] [-nl NL]\n                     [-m {-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17}] [-o O]e.g.python pynamer_CN -o ~/example0.txt -m 0\npython pynamer_CN -o ~/example1.txt -m 0 -nl HANDPICK_NAME\n\nName styles\n\n-1: All 0-17  NOTE Make sure you are using 64-bit version to obtain enough memory(&gt; 4GB)\n0: SURN + 1 NAME (All lowercase e.g. zhangsan)\n1: SURN + 1 NAME (Only the first letter uppercase e.g. Zhangsan)\n2: SURN + 1 NAME (First letter of SURM or NAME uppercase e.g. ZhangSan)\n3: SURN + 1 NAME (ALL uppercase e.g. ZHANGSAN)\n4: SURN + 1 NAME (All lowercase with another order e.g. sanzhang)\n5: SURN + 1 NAME (Only the first letter uppercase with another order e.g. Sanzhang)\n6: SURN + 1 NAME (First letter of SURM or NAME uppercase with another order e.g. SanZhang)\n7: SURN + 1 NAME (ALL uppercase with another oder e.g. SANZHANG)\n8: SURN + 2 NAME (All lowercase e.g. liyiyi)\n9: SURN + 2 NAME (Only the first letter uppercase e.g. Liyiyi)\n10: SURN + 2 NAME (First letter of SURM or NAME uppercase e.g. LiYiYi)\n11: SURN + 2 NAME (ALL uppercase e.g. LIYIYI)\n12: SURN + 2 NAME (All lowercase with another order e.g. yiyili)\n13: SURN + 2 NAME (Only the first letter uppercase with another order e.g. Yiyili)\n14: SURN + 2 NAME (First letter of SURM or NAME uppercase with another order e.g. YiYiLi)\n15: SURN + 2 NAME (ALL uppercase with another order e.g. YIYILI)\n16: SURN + 1 NAME (Abbreviation e.g. zhs or zs)\n17: SURN + 2 NAME (Abbreviation e.g. lyy)\n\nHere are some generated examples:example0\nexample1:) Feel free to open an issue for adding more names (if missed).License\nMIT License", "categories": [{"name": "Python", "slug": "Python", "permalink": "/category/Python/"}], "tags": [{"name": "Name generator", "slug": "Name generator", "permalink": "/tag/Name%20generator/"}, {"name": "Chinese name dictionary", "slug": "Chinese name dictionary", "permalink": "/tag/Chinese%20name%20dictionary/"}]}, {"title": "test", "date": "2020-04-19T14:54:00-00.00", "path": "/archives/2020-04-19-test/", "text": "\n0x01\n\n", "categories": [{"name": "default", "slug": "default", "permalink": "/category/default/"}], "tags": [{"name": "blog", "slug": "blog", "permalink": "/tag/blog/"}, {"name": "GitHub", "slug": "GitHub", "permalink": "/tag/GitHub/"}]}], "pages": [{"title": "About", "date": "2020-04-19T14:51:00-00.00", "path": "/about/", "text": "\u30d8\u30c3\u30c9\u30bb\u30c3\u30c8\u764c\u306e\u4e2d\u671f\u60a3\u8005\nBlogger 0.001x\nGeek 0.01x\n\nContact\nEmail: ZVd4cE1USXhNaU52ZFhSc2IyOXJMbU52YlE9PQ== (xxx64)", "categories": [], "tags": []}]}